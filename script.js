// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const config = {
  initialClickValue: 0.001,
  clickUpgrades: [
    {
      name: "–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞–ª–µ—Ü",
      description: "–ë–∞–∑–æ–≤–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–ª–∏–∫–∞",
      levels: 10,
      baseCost: 10,
      costMultiplier: 1.5,
      baseValue: 0.002,
      valueMultiplier: 1.2,
      icon: "üëÜ"
    },
    {
      name: "–ó–æ–ª–æ—Ç–æ–π –ø–∞–ª–µ—Ü",
      description: "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–ª–∏–∫–∞",
      levels: 5,
      baseCost: 100,
      costMultiplier: 2,
      baseValue: 0.01,
      valueMultiplier: 1.5,
      icon: "üëâ",
      requires: { upgradeIndex: 0, minLevel: 5 }
    }
  ],
  autoClickUpgrades: [
    {
      name: "–ù–æ–≤–∏—á–æ–∫-–º–∞–π–Ω–µ—Ä",
      description: "–ë–∞–∑–æ–≤—ã–π –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥",
      levels: 10,
      baseCost: 50,
      costMultiplier: 1.8,
      baseValue: 0.01,
      valueMultiplier: 1.3,
      icon: "‚õèÔ∏è"
    },
    {
      name: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª-–º–∞–π–Ω–µ—Ä",
      description: "–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥",
      levels: 5,
      baseCost: 500,
      costMultiplier: 2.2,
      baseValue: 0.1,
      valueMultiplier: 1.7,
      icon: "‚öíÔ∏è",
      requires: { upgradeIndex: 0, minLevel: 5 }
    }
  ],
  adMultiplier: 2,
  adDuration: 30000,    // 30 —Å–µ–∫—É–Ω–¥
  adCooldown: 60000,    // 1 –º–∏–Ω—É—Ç–∞
  adRetryDelay: 30000,  // 30 —Å–µ–∫—É–Ω–¥
  bannerAdRefresh: 60000 // 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –±–∞–Ω–Ω–µ—Ä–∞
};

// –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
let currentPlayer = {
  id: 0,
  name: "–í—ã",
  score: 0,
  clickUpgrades: config.clickUpgrades.map(() => ({ level: 0 })),
  autoClickUpgrades: config.autoClickUpgrades.map(() => ({ level: 0 })),
  baseClickValue: config.initialClickValue,
  totalClickValue: config.initialClickValue,
  totalAutoClickValue: 0,
  adMultiplierActive: false,
  adMultiplierEndTime: 0,
  adButtonCooldownEnd: 0,
  autoClickInterval: null,
  adReady: false,
  lastAdCheckTime: 0,
  bannerAdInterval: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK Bridge
function initVKBridge() {
  if (typeof vkBridge !== 'undefined') {
    vkBridge.send('VKWebAppInit')
      .then(() => {
        console.log('VK Bridge –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return vkBridge.send('VKWebAppGetUserInfo');
      })
      .then(user => {
        currentPlayer.id = user.id;
        currentPlayer.name = `${user.first_name} ${user.last_name}`;
        loadPlayerData();
        initAdSystem();
        startAdMultiplierCheck();
        initBannerAd(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–Ω–Ω–µ—Ä–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã
      })
      .catch(error => {
        console.error('–û—à–∏–±–∫–∞ VK Bridge:', error);
        initTestMode();
      });
  } else {
    console.log('VK Bridge –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º');
    initTestMode();
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
function initTestMode() {
  currentPlayer.id = 999;
  currentPlayer.name = "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º";
  currentPlayer.adReady = true;
  loadPlayerData();
  startAdMultiplierCheck();
  initBannerAd(); // –ë–∞–Ω–Ω–µ—Ä –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–Ω–Ω–µ—Ä–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã
function initBannerAd() {
  if (typeof vkBridge === 'undefined') {
    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    const testBanner = document.createElement('div');
    testBanner.id = 'banner-ad';
    testBanner.style.cssText = `
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      height: 50px;
      background-color: #f0f0f0;
      display: flex;
      align-items: center;
      justify-content: center;
      border-top: 1px solid #ccc;
      z-index: 1000;
    `;
    testBanner.innerHTML = '<p>–ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–∞–Ω–Ω–µ—Ä</p>';
    document.body.appendChild(testBanner);
    return;
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –±–∞–Ω–Ω–µ—Ä–∞
  const showBanner = () => {
    vkBridge.send('VKWebAppShowBannerAd', {
      banner_location: 'bottom'
    }).then(data => {
      if (!data.result) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω–Ω–µ—Ä');
      }
    }).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –±–∞–Ω–Ω–µ—Ä–∞:', error);
    });
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
  showBanner();
  currentPlayer.bannerAdInterval = setInterval(showBanner, config.bannerAdRefresh);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–Ω–Ω–µ—Ä–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã
function stopBannerAd() {
  if (currentPlayer.bannerAdInterval) {
    clearInterval(currentPlayer.bannerAdInterval);
  }
  
  if (typeof vkBridge !== 'undefined') {
    vkBridge.send('VKWebAppHideBannerAd').catch(console.error);
  } else {
    const banner = document.getElementById('banner-ad');
    if (banner) banner.remove();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async function initAdSystem() {
  const now = Date.now();
  if (now - currentPlayer.lastAdCheckTime < 10000) return;
  currentPlayer.lastAdCheckTime = now;
  
  try {
    if (typeof vkBridge === 'undefined') {
      currentPlayer.adReady = true;
      return;
    }

    const checkResult = await vkBridge.send('VKWebAppCheckNativeAds', { 
      ad_format: 'reward' 
    });
    currentPlayer.adReady = checkResult.result;
    updateAdButton();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∫–ª–∞–º—ã:', error);
    currentPlayer.adReady = false;
    updateAdButton();
  }
}

// ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ)

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', () => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ AdBlock
  const adCheck = document.createElement('div');
  adCheck.innerHTML = '&nbsp;';
  adCheck.className = 'ad';
  document.body.appendChild(adCheck);
  setTimeout(() => {
    if (adCheck.offsetHeight === 0) {
      showMessage("–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–∫–ª—é—á–∏—Ç–µ AdBlock");
    }
    document.body.removeChild(adCheck);
  }, 100);

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  document.getElementById('clickButton')?.addEventListener('click', handleClick);
  
  document.querySelectorAll('.tab-button').forEach(button => {
    button.addEventListener('click', () => {
      switchTab(button.getAttribute('data-tab'));
    });
  });
  
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  window.buyClickUpgrade = buyClickUpgrade;
  window.buyAutoClickUpgrade = buyAutoClickUpgrade;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  initVKBridge();
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π CSS –¥–ª—è —É—á–µ—Ç–∞ –±–∞–Ω–Ω–µ—Ä–∞
const style = document.createElement('style');
style.textContent = `
  #banner-ad {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: 50px;
    background-color: #f0f0f0;
    display: flex;
    align-items: center;
    justify-content: center;
    border-top: 1px solid #ccc;
    z-index: 1000;
  }
  
  /* –°–¥–≤–∏–≥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª—Å—è –±–∞–Ω–Ω–µ—Ä–æ–º */
  .tab-content {
    padding-bottom: 60px;
  }
`;
document.head.appendChild(style);

// –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
const playersDB = [
 
];
