// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const config = {
    initialClickValue: 0.000001,
    // –í–µ—Ç–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –∫–ª–∏–∫–∞
    clickUpgrades: [
      {
        name: "–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞–ª–µ—Ü",
        description: "–ë–∞–∑–æ–≤–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–ª–∏–∫–∞",
        levels: 10,
        baseCost: 10,
        costMultiplier: 1.5,
        baseValue: 0.000002,
        valueMultiplier: 1.2,
        icon: "üëÜ"
      },
      {
        name: "–ó–æ–ª–æ—Ç–æ–π –ø–∞–ª–µ—Ü",
        description: "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–ª–∏–∫–∞",
        levels: 5,
        baseCost: 100,
        costMultiplier: 2,
        baseValue: 0.00001,
        valueMultiplier: 1.5,
        icon: "üëâ",
        requires: { upgradeIndex: 0, minLevel: 5 }
      },
      {
        name: "–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –ø–∞–ª–µ—Ü",
        description: "–û–≥—Ä–æ–º–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–ª–∏–∫–∞",
        levels: 3,
        baseCost: 1000,
        costMultiplier: 3,
        baseValue: 0.0001,
        valueMultiplier: 2,
        icon: "üëå",
        requires: { upgradeIndex: 1, minLevel: 3 }
      }
    ],
    // –í–µ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞
    autoClickUpgrades: [
      {
        name: "–ù–æ–≤–∏—á–æ–∫-–º–∞–π–Ω–µ—Ä",
        description: "–ë–∞–∑–æ–≤—ã–π –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥",
        levels: 10,
        baseCost: 50,
        costMultiplier: 1.8,
        baseValue: 0.00001,
        valueMultiplier: 1.3,
        icon: "‚õèÔ∏è"
      },
      {
        name: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª-–º–∞–π–Ω–µ—Ä",
        description: "–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥",
        levels: 5,
        baseCost: 500,
        costMultiplier: 2.2,
        baseValue: 0.0001,
        valueMultiplier: 1.7,
        icon: "‚öíÔ∏è",
        requires: { upgradeIndex: 0, minLevel: 5 }
      },
      {
        name: "–†–æ–±–æ—Ç-–º–∞–π–Ω–µ—Ä",
        description: "–ú–æ—â–Ω—ã–π –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥",
        levels: 3,
        baseCost: 5000,
        costMultiplier: 3,
        baseValue: 0.001,
        valueMultiplier: 2,
        icon: "ü§ñ",
        requires: { upgradeIndex: 1, minLevel: 3 }
      }
    ],
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–ª–∞–º—ã
    adMultiplier: 2,
    adDuration: 60000,
    adCooldown: 180000
  };
  
  // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VK API)
  let playersDB = [
    { id: 1, name: "–ò–≥—Ä–æ–∫ 1", score: 100.123456 },
    { id: 2, name: "–ò–≥—Ä–æ–∫ 2", score: 90.654321 },
    { id: 3, name: "–ò–≥—Ä–æ–∫ 3", score: 80.987654 }
  ];
  
  // –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  let currentPlayer = {
    id: 0,
    name: "–í—ã",
    score: 0,
    // –£–ª—É—á—à–µ–Ω–∏—è –∫–ª–∏–∫–∞
    clickUpgrades: config.clickUpgrades.map(upgrade => ({
      level: 0,
      currentValue: 0
    })),
    // –ê–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥
    autoClickUpgrades: config.autoClickUpgrades.map(upgrade => ({
      level: 0,
      currentValue: 0
    })),
    // –û–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    baseClickValue: config.initialClickValue,
    totalClickValue: config.initialClickValue,
    totalAutoClickValue: 0,
    // –†–µ–∫–ª–∞–º–∞
    adMultiplierActive: false,
    adMultiplierEndTime: 0,
    adButtonCooldownEnd: 0,
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
    autoClickInterval: null
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  vkBridge.send('VKWebAppInit');
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  vkBridge.send('VKWebAppGetUserInfo')
    .then(user => {
      currentPlayer.id = user.id;
      currentPlayer.name = user.first_name + " " + user.last_name;
      loadPlayerData();
      startAdMultiplierCheck();
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    });
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
  function loadPlayerData() {
    const savedData = localStorage.getItem('clickerData');
    if (savedData) {
      const data = JSON.parse(savedData);
      Object.assign(currentPlayer, data);
      
      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
      calculateTotalClickValue();
      calculateTotalAutoClickValue();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
      if (currentPlayer.adMultiplierEndTime > Date.now()) {
        currentPlayer.adMultiplierActive = true;
        setTimeout(endAdMultiplier, currentPlayer.adMultiplierEndTime - Date.now());
      }
      
      updateUI();
      startAutoClicker();
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
  function savePlayerData() {
    localStorage.setItem('clickerData', JSON.stringify(currentPlayer));
  }
  
  // ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ì–†–´ ==========
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
  function handleClick() {
    currentPlayer.score += currentPlayer.totalClickValue;
    updateCounter();
    savePlayerData();
  }
  
  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞
  function startAutoClicker() {
    if (currentPlayer.autoClickInterval) {
      clearInterval(currentPlayer.autoClickInterval);
    }
    
    if (currentPlayer.totalAutoClickValue > 0) {
      currentPlayer.autoClickInterval = setInterval(() => {
        currentPlayer.score += currentPlayer.totalAutoClickValue;
        updateCounter();
        savePlayerData();
      }, 1000);
    }
  }
  
  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª–∏–∫–∞
  function calculateTotalClickValue() {
    let total = config.initialClickValue;
    
    config.clickUpgrades.forEach((upgrade, index) => {
      const playerUpgrade = currentPlayer.clickUpgrades[index];
      if (playerUpgrade.level > 0) {
        total += upgrade.baseValue * Math.pow(upgrade.valueMultiplier, playerUpgrade.level - 1);
      }
    });
    
    currentPlayer.baseClickValue = total;
    currentPlayer.totalClickValue = currentPlayer.adMultiplierActive ? 
      total * config.adMultiplier : 
      total;
  }
  
  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞
  function calculateTotalAutoClickValue() {
    let total = 0;
    
    config.autoClickUpgrades.forEach((upgrade, index) => {
      const playerUpgrade = currentPlayer.autoClickUpgrades[index];
      if (playerUpgrade.level > 0) {
        total += upgrade.baseValue * Math.pow(upgrade.valueMultiplier, playerUpgrade.level - 1);
      }
    });
    
    currentPlayer.totalAutoClickValue = total;
  }
  
  // ========== –°–ò–°–¢–ï–ú–ê –ü–†–û–ö–ê–ß–ö–ò ==========
  
  // –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–ª–∏–∫–∞
  function buyClickUpgrade(upgradeIndex) {
    const upgrade = config.clickUpgrades[upgradeIndex];
    const playerUpgrade = currentPlayer.clickUpgrades[upgradeIndex];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if (upgrade.requires) {
      const reqUpgrade = currentPlayer.clickUpgrades[upgrade.requires.upgradeIndex];
      if (reqUpgrade.level < upgrade.requires.minLevel) {
        showMessage(`–¢—Ä–µ–±—É–µ—Ç—Å—è ${config.clickUpgrades[upgrade.requires.upgradeIndex].name} —É—Ä–æ–≤–Ω—è ${upgrade.requires.minLevel}`);
        return;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if (playerUpgrade.level >= upgrade.levels) {
      showMessage("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç");
      return;
    }
    
    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const cost = upgrade.baseCost * Math.pow(upgrade.costMultiplier, playerUpgrade.level);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if (currentPlayer.score >= cost) {
      currentPlayer.score -= cost;
      playerUpgrade.level++;
      
      // –ü–µ—Ä–µ—Å—á–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π
      calculateTotalClickValue();
      updateUI();
      savePlayerData();
      showMessage(`${upgrade.name} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${playerUpgrade.level}!`);
    } else {
      showMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤");
    }
  }
  
  // –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞
  function buyAutoClickUpgrade(upgradeIndex) {
    const upgrade = config.autoClickUpgrades[upgradeIndex];
    const playerUpgrade = currentPlayer.autoClickUpgrades[upgradeIndex];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if (upgrade.requires) {
      const reqUpgrade = currentPlayer.autoClickUpgrades[upgrade.requires.upgradeIndex];
      if (reqUpgrade.level < upgrade.requires.minLevel) {
        showMessage(`–¢—Ä–µ–±—É–µ—Ç—Å—è ${config.autoClickUpgrades[upgrade.requires.upgradeIndex].name} —É—Ä–æ–≤–Ω—è ${upgrade.requires.minLevel}`);
        return;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if (playerUpgrade.level >= upgrade.levels) {
      showMessage("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç");
      return;
    }
    
    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const cost = upgrade.baseCost * Math.pow(upgrade.costMultiplier, playerUpgrade.level);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if (currentPlayer.score >= cost) {
      currentPlayer.score -= cost;
      playerUpgrade.level++;
      
      // –ü–µ—Ä–µ—Å—á–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π
      calculateTotalAutoClickValue();
      
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞
      startAutoClicker();
      
      updateUI();
      savePlayerData();
      showMessage(`${upgrade.name} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${playerUpgrade.level}!`);
    } else {
      showMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤");
    }
  }
  
  // ========== –°–ò–°–¢–ï–ú–ê –†–ï–ö–õ–ê–ú–´ ==========
  
  // –ü–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
  function showAdAndActivateMultiplier() {
    const now = Date.now();
    if (currentPlayer.adMultiplierActive || now < currentPlayer.adButtonCooldownEnd) {
      return;
    }
    
    // –ü–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    vkBridge.send('VKWebAppShowNativeAds', { ad_format: 'reward' })
      .then(data => {
        if (data.result) {
          activateAdMultiplier();
        }
      })
      .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã:', error);
        // –î–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã
        activateAdMultiplier();
      });
  }
  
  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è –∑–∞ —Ä–µ–∫–ª–∞–º—É
  function activateAdMultiplier() {
    currentPlayer.adMultiplierActive = true;
    currentPlayer.adMultiplierEndTime = Date.now() + config.adDuration;
    currentPlayer.adButtonCooldownEnd = Date.now() + config.adDuration + config.adCooldown;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
    calculateTotalClickValue();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
    setTimeout(endAdMultiplier, config.adDuration);
    
    updateUI();
    savePlayerData();
    showMessage("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–ª–∏–∫–æ–≤ x2 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 –º–∏–Ω—É—Ç—É!");
  }
  
  // –û–∫–æ–Ω—á–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è
  function endAdMultiplier() {
    currentPlayer.adMultiplierActive = false;
    calculateTotalClickValue();
    updateUI();
    savePlayerData();
    showMessage("–î–µ–π—Å—Ç–≤–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å");
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
  function startAdMultiplierCheck() {
    setInterval(() => {
      if (currentPlayer.adMultiplierActive && Date.now() >= currentPlayer.adMultiplierEndTime) {
        endAdMultiplier();
      }
      updateAdButton();
    }, 1000);
  }
  
  // ========== –ò–ù–¢–ï–†–§–ï–ô–° ==========
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  function updateUI() {
    updateCounter();
    updateAdButton();
    renderUpgrades();
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
  function updateCounter() {
    document.getElementById('counter').textContent = currentPlayer.score.toFixed(6);
    document.getElementById('clickValue').textContent = currentPlayer.totalClickValue.toFixed(6);
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∫–ª–∞–º—ã
  function updateAdButton() {
    const adButton = document.getElementById('watchAdButton');
    const now = Date.now();
    
    if (currentPlayer.adMultiplierActive) {
      const timeLeft = Math.ceil((currentPlayer.adMultiplierEndTime - now) / 1000);
      adButton.textContent = `–£–º–Ω–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–µ (${timeLeft}—Å)`;
      adButton.disabled = true;
      adButton.classList.add('active');
    } else if (now < currentPlayer.adButtonCooldownEnd) {
      const cooldownLeft = Math.ceil((currentPlayer.adButtonCooldownEnd - now) / 1000);
      adButton.textContent = `–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ ${cooldownLeft}—Å`;
      adButton.disabled = true;
      adButton.classList.remove('active');
    } else {
      adButton.textContent = "–£–º–Ω–æ–∂–∏—Ç—å –∫–ª–∏–∫–∏ —Ö2 (–†–µ–∫–ª–∞–º–∞)";
      adButton.disabled = false;
      adButton.classList.remove('active');
    }
  }
  
  // –†–µ–Ω–¥–µ—Ä —É–ª—É—á—à–µ–Ω–∏–π
  function renderUpgrades() {
    const clickUpgradesContainer = document.getElementById('clickUpgrades');
    const autoClickUpgradesContainer = document.getElementById('autoClickUpgrades');
    
    clickUpgradesContainer.innerHTML = '';
    autoClickUpgradesContainer.innerHTML = '';
    
    // –†–µ–Ω–¥–µ—Ä —É–ª—É—á—à–µ–Ω–∏–π –∫–ª–∏–∫–∞
    config.clickUpgrades.forEach((upgrade, index) => {
      const playerUpgrade = currentPlayer.clickUpgrades[index];
      const upgradeElement = createUpgradeElement(upgrade, playerUpgrade, index, 'click');
      clickUpgradesContainer.appendChild(upgradeElement);
    });
    
    // –†–µ–Ω–¥–µ—Ä —É–ª—É—á—à–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥–∞
    config.autoClickUpgrades.forEach((upgrade, index) => {
      const playerUpgrade = currentPlayer.autoClickUpgrades[index];
      const upgradeElement = createUpgradeElement(upgrade, playerUpgrade, index, 'auto');
      autoClickUpgradesContainer.appendChild(upgradeElement);
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    document.getElementById('totalClickValueStat').textContent = currentPlayer.totalClickValue.toFixed(6);
    document.getElementById('totalAutoClickValueStat').textContent = currentPlayer.totalAutoClickValue.toFixed(6);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏
    document.getElementById('upgrades').innerHTML = createUpgradesTab();
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–ª—É—á—à–µ–Ω–∏—è
  function createUpgradeElement(upgrade, playerUpgrade, index, type) {
    const element = document.createElement('div');
    const progress = (playerUpgrade.level / upgrade.levels) * 100;
    const nextCost = playerUpgrade.level < upgrade.levels ? 
      Math.floor(upgrade.baseCost * Math.pow(upgrade.costMultiplier, playerUpgrade.level)) : 0;
    const currentValue = playerUpgrade.level > 0 ? 
      (upgrade.baseValue * Math.pow(upgrade.valueMultiplier, playerUpgrade.level - 1)).toFixed(6) : 0;
    
    const isLocked = !canBuyUpgrade(type, index);
    const isMaxLevel = playerUpgrade.level >= upgrade.levels;
    
    element.className = `upgrade ${isMaxLevel ? 'max-level' : ''} ${isLocked ? 'locked' : ''}`;
    element.innerHTML = `
      <div class="upgrade-icon">${upgrade.icon}</div>
      <div class="upgrade-info">
        <h4>${upgrade.name} (${playerUpgrade.level}/${upgrade.levels})</h4>
        <p>${upgrade.description}</p>
        <div class="progress-bar">
          <div class="progress" style="width: ${progress}%"></div>
        </div>
        <div class="upgrade-stats">
          <span>+${currentValue} ${type === 'click' ? '–∑–∞ –∫–ª–∏–∫' : '/—Å–µ–∫'}</span>
          ${!isMaxLevel ? `<span>–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${nextCost.toFixed(2)}</span>` : '<span class="max-level-text">–ú–ê–ö–°. –£–†–û–í–ï–ù–¨</span>'}
        </div>
      </div>
      <button class="buy-button" onclick="buy${type === 'click' ? 'Click' : 'AutoClick'}Upgrade(${index})" 
        ${isMaxLevel || isLocked ? 'disabled' : ''}>
        ${isMaxLevel ? 'MAX' : '–£–ª—É—á—à–∏—Ç—å'}
      </button>
    `;
    
    return element;
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏
  function createUpgradesTab() {
    return `
      <div class="upgrades-tab">
        <div class="upgrades-section">
          <h3><i class="icon">üëÜ</i> –£–ª—É—á—à–µ–Ω–∏—è –∫–ª–∏–∫–∞</h3>
          <div id="clickUpgrades" class="upgrades-container"></div>
        </div>
        
        <div class="upgrades-section">
          <h3><i class="icon">‚õèÔ∏è</i> –ê–≤—Ç–æ–º–∞–π–Ω–∏–Ω–≥</h3>
          <div id="autoClickUpgrades" class="upgrades-container"></div>
        </div>
        
        <div class="stats-section">
          <h3>–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-value" id="totalClickValueStat">${currentPlayer.totalClickValue.toFixed(6)}</div>
              <div class="stat-name">–ó–∞ –∫–ª–∏–∫</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="totalAutoClickValueStat">${currentPlayer.totalAutoClickValue.toFixed(6)}</div>
              <div class="stat-name">–í —Å–µ–∫—É–Ω–¥—É</div>
            </div>
          </div>
        </div>
      </div>
    `;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ
  function canBuyUpgrade(type, index) {
    const upgrade = type === 'click' ? config.clickUpgrades[index] : config.autoClickUpgrades[index];
    const playerUpgrade = type === 'click' ? currentPlayer.clickUpgrades[index] : currentPlayer.autoClickUpgrades[index];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if (upgrade.requires) {
      const reqUpgrade = type === 'click' ? 
        currentPlayer.clickUpgrades[upgrade.requires.upgradeIndex] : 
        currentPlayer.autoClickUpgrades[upgrade.requires.upgradeIndex];
      
      if (reqUpgrade.level < upgrade.requires.minLevel) {
        return false;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if (playerUpgrade.level >= upgrade.levels) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const cost = upgrade.baseCost * Math.pow(upgrade.costMultiplier, playerUpgrade.level);
    return currentPlayer.score >= cost;
  }
  
  // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  function showMessage(text) {
    const messageElement = document.getElementById('message');
    if (messageElement) {
      messageElement.textContent = text;
      messageElement.style.display = 'block';
      setTimeout(() => {
        messageElement.style.display = 'none';
      }, 3000);
    }
  }
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
  function switchTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => {
      tab.classList.remove('active');
    });
    document.querySelectorAll('.tab-button').forEach(button => {
      button.classList.remove('active');
    });
    
    document.getElementById(tabName).classList.add('active');
    document.querySelector(`.tab-button[data-tab="${tabName}"]`).classList.add('active');
    
    if (tabName === 'top') {
      showTopPlayers();
    } else if (tabName === 'upgrades') {
      renderUpgrades();
    }
  }
  
  // –ü–æ–∫–∞–∑ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
  function showTopPlayers() {
    const topPlayersList = document.getElementById('topPlayersList');
    topPlayersList.innerHTML = '';
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ VK API
    const allPlayers = [...playersDB, {
      id: currentPlayer.id,
      name: currentPlayer.name,
      score: currentPlayer.score
    }];
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—á–µ—Ç–∞
    allPlayers.sort((a, b) => b.score - a.score);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø-100
    const top100 = allPlayers.slice(0, 100);
    top100.forEach((player, index) => {
      const playerElement = document.createElement('div');
      playerElement.className = `player ${player.id === currentPlayer.id ? 'current-player' : ''}`;
      playerElement.innerHTML = `
        <span class="rank">${index + 1}.</span>
        <span class="name">${player.name}</span>
        <span class="score">${player.score.toFixed(6)}</span>
      `;
      topPlayersList.appendChild(playerElement);
    });
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  document.addEventListener('DOMContentLoaded', () => {
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('clickButton').addEventListener('click', handleClick);
    document.getElementById('watchAdButton').addEventListener('click', showAdAndActivateMultiplier);
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-button').forEach(button => {
      button.addEventListener('click', () => {
        switchTab(button.getAttribute('data-tab'));
      });
    });
    
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ UI
    updateUI();
  });